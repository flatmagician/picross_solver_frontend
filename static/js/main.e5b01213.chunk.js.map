{"version":3,"sources":["RowColForm.js","Popup.js","Constraint.js","Grid.js","Page.js","App.js","serviceWorker.js","index.js"],"names":["RowColForm","props","state","value","handleChange","bind","event","this","setState","target","passValue","id","className","onSubmit","handleSubmit","name","type","onChange","React","Component","Popup","onKeyDown","console","log","key","preventDefault","stopPropagation","left_offset","cols","rowConstraint","text","axis","valid","buttonText","getText","nameInput","focus","row","col","colConstraint","split","map","val","constraint_block_total","length","forEach","constraint_val","Number","isInteger","passVal","style","ref","input","onClick","Constraint","updateColor","getPopupVal","closePopup","prevProps","prevState","snapshot","color","JSON","parse","stringify","showPopup","passPopupIndices","passPopupVal","rows","Grid","grid","popupIndices","solution","images","Duck","row_constraint_len","col_constraint_len","row_constraint","col_constraint","Crab","Koala","image","constructGrid","constructConstraints","populateGrid","renderGrid","getPopupIndices","resizeConstraints","passState","submit","animation","grids","display_grids","j","l","i","Array","fill","push","setInterval","clearInterval","grid_input","i_offset","j_offset","popup","element","constraint","index","new_len","Page","getFormValue","newState","request_body","response","exitPopup","solver","getGridState","getData","updateGrid","clickHandler","animationToggle","solverToggle","imageToggle","gridState","w","h","x","y","axios","method","url","data","then","catch","error","App","rel","href","integrity","crossorigin","src","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5b01213.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport \"./RowColForm.css\"\n\nexport default class RowColForm extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { value: '' };\n\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event) {\n        this.setState({ value: event.target.value });\n        this.props.passValue(this.props.id, +event.target.value)\n    }\n\n\n    render() {\n        return (\n            <div className=\"rowColForm\">\n                <div className=\"input-group mb-3\" onSubmit={this.handleSubmit}>\n                    <span className=\"input-group-addon\" id=\"basic-addon3\">{this.props.name}</span>\n                    <input type=\"text\" className=\"form-control\" value={this.state.value} onChange={this.handleChange} />\n                </div>\n            </div>\n        );\n    }\n}","import React, { Component, useRef } from 'react'\nimport \"./Popup.css\"\n\nexport default class Popup extends Component {\n    constructor(props) {\n        super(props)\n\n        const left_offset = -410 + 20*(18 - this.props.cols - this.props.rowConstraint) \n\n        this.state = {\n            text: \"\",\n            value: [],\n            axis: \"\",\n            valid: true,\n            buttonText: \"Press Enter to Submit\",\n            left_offset: left_offset\n        }\n\n        \n\n        this.getText = this.getText.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n        this.onKeyDown = this.onKeyDown.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n\n    componentDidMount() {\n        this.getText()\n        this.nameInput.focus()\n    }\n\n    getText() {\n        let text\n\n        if (this.props.row < this.props.rowConstraint) {\n            text = \"col \" + (this.props.col - this.props.colConstraint)\n            this.setState({ axis: \"cols\" })\n        }\n        else {\n            text = \"row \" + (this.props.row - this.props.rowConstraint)\n            this.setState({ axis: \"rows\" })\n        }\n        this.setState({ text: text })\n    }\n\n    handleChange(event) {\n        let res = event.target.value.split(\" \")\n        let value = res.map(val => +val)\n        this.setState({ value: value });\n    }\n\n    onKeyDown = (event) => {\n        console.log(event.key)\n        // 'keypress' event misbehaves on mobile so we track 'Enter' key via 'keydown' event\n        if (event.key === 'Enter') {\n            event.preventDefault();\n            event.stopPropagation();\n            this.handleSubmit(event);\n        }\n    }\n\n    handleSubmit(event) {\n        let constraint_block_total = this.state.value.length - 1\n        this.state.value.forEach(constraint_val => {\n            //if constraints are invalid, make block total an invalid number\n            if (!Number.isInteger(constraint_val) || constraint_val < 1) {\n                constraint_block_total += 25\n            }\n            else {\n                constraint_block_total += constraint_val\n            }\n        })\n        const axis = this.state.axis\n        if (constraint_block_total <= this.props[axis]) {\n            this.setState({\n                valid: true,\n                buttonText: \"Press Enter to Submit\",\n            })\n            //submit value\n            this.props.passVal(this.state.value, this.state.axis)\n        }\n        else {\n            this.setState({\n                valid: false,\n                buttonText: \"Invalid Entry\"\n            })\n        }\n        event.preventDefault();\n    }\n\n    render() {\n        return (\n            <div className=\"popup\" onKeyDown={this.onKeyDown} style={{\"left\": this.state.left_offset}}>\n\n                <div className=\"input-group mb-3\" onSubmit={this.handleSubmit}>\n                    <span className=\"input-group-addon addon-small\">{this.state.text}</span>\n                    <input type=\"text\" className=\"form-control\" ref={(input) => { this.nameInput = input; }} value={this.props.value} onChange={this.handleChange} />\n                </div>\n                <input type=\"submit\" value={this.state.buttonText} className=\"btn btn-danger btn-small\" onClick={this.handleSubmit} />\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Popup from \"./Popup\"\nimport \"./Constraint.css\"\n\nexport default class Constraint extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            value: [],\n            style: []\n        }\n        this.state.style = this.props.style\n        this.state.style[\"color\"] = this.updateColor()\n\n        this.updateColor = this.updateColor.bind(this)\n        this.onClick = this.onClick.bind(this)\n        this.getPopupVal = this.getPopupVal.bind(this)\n        this.closePopup = this.closePopup.bind(this)\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.style !== this.props.style) {\n            let style = this.props.style\n            style[\"color\"] = this.updateColor()\n            this.setState({\n                style: style\n            })\n\n        }\n        if (this.state.style.color !== this.updateColor()) {\n            let style = JSON.parse(JSON.stringify(this.state.style))\n            style[\"color\"] = this.updateColor()\n            this.setState({\n                style: style\n            })\n        }\n    }\n\n    updateColor() {\n        let color = \"rgb(155,155,155)\"\n        if (this.props.value !== \"X\") {\n            color = \"black\"\n        }\n        return color\n    }\n\n\n    onClick() {\n        if (this.props.showPopup) {\n            this.closePopup()\n        }\n        else {\n            this.props.passPopupIndices([this.props.row, this.props.col])\n        }\n\n    }\n\n    getPopupVal(value, axis) {\n        this.setState({\n            value: value\n        })\n        if (axis !== \"rows\") {\n            this.props.passPopupVal(value, axis, this.props.col)\n        }\n        else if (axis !== \"cols\") {\n            this.props.passPopupVal(value, axis, this.props.row)\n        }\n\n        this.closePopup()\n    }\n\n    closePopup() {\n        this.props.passPopupIndices([-1, -1])\n    }\n\n\n\n\n    render() {\n        return (\n            <span className=\"constraintWrapper\">\n                <div className=\"gridSquare constraint\" onClick={this.onClick} style={this.state.style}>\n                    {this.props.value}\n                </div>\n                <span>\n                    {this.props.showPopup ? <Popup\n                        passVal={this.getPopupVal}\n                        rows={this.props.rows} cols={this.props.cols}\n                        row={this.props.row} col={this.props.col}\n                        rowConstraint={this.props.rowConstraint}\n                        colConstraint={this.props.colConstraint} /> : <span></span>}\n                </span>\n            </span>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport Constraint from \"./Constraint\"\nimport \"./Grid.css\"\n\nexport default class Grid extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            grid: [],\n            popupIndices: [-1, -1],\n            solution: null,\n            images: {\n                Duck: {\n                    row_constraint_len: 4,\n                    col_constraint_len: 3,\n                    row_constraint: [[3], [5], [3, 4], [7], [5], [3], [5], [8, 1], [3, 3, 3], [2, 3, 7], [2, 4, 5], [2, 8], [10], [3, 2], [6]],\n                    col_constraint: [[1], [2, 4], [4, 6], [2, 6, 2, 1], [8, 2, 1, 1], [8, 2, 3], [4, 2, 6], [2, 2, 5], [3, 2, 1], [6], [5], [4], [5], [4], [3]],\n                },\n                Crab: {\n                    row_constraint_len: 5,\n                    col_constraint_len: 6,\n                    col_constraint: [[2, 3], [1, 2, 2], [2, 2, 2, 5], [2, 1, 2, 3], [2, 1, 1, 1], [2, 2, 4], [3, 10], [6, 8], [4, 11], [2, 1, 9], [2, 1, 1, 10], [2, 1, 12], [1, 12], [1, 1, 11], [2, 9], [3, 2, 10], [11, 1, 1, 3], [7, 1, 1, 1, 2], [2, 1, 1, 1], [1, 1, 1, 2], [1, 1, 2, 2, 1], [2, 2, 2, 3], [3, 2, 2], [1]],\n                    row_constraint: [[1], [2], [3], [4, 2, 2], [6, 4], [3, 3], [6, 2], [2, 2], [2, 1, 1, 1, 2], [4, 2, 2, 2], [1, 2, 1, 4, 2], [1, 1, 9, 4], [14, 2, 2], [2, 12, 2, 1], [2, 1, 10, 2, 3], [1, 15, 1], [2, 11, 4, 1], [2, 14, 3], [1, 2, 15, 1], [1, 2, 9, 2, 2, 1], [1, 3, 3], [1, 1], [1, 1], [1]]\n                },\n                Koala: {\n                    row_constraint_len: 6,\n                    col_constraint_len: 6,\n                    col_constraint: [[5, 10], [2, 2, 3, 2], [1, 1, 2, 1], [1, 1, 2, 1, 2], [3, 5, 1, 1], [1, 2, 1, 1], [1, 1, 2, 1, 2, 1], [1, 1, 2, 2, 1], [1, 3, 1, 2, 2, 1], [1, 3, 1, 2, 1, 1], [1, 1, 2, 1, 1], [1, 1, 1, 1, 1, 1], [1, 2, 1, 1, 1], [2, 2, 3, 1, 1], [2, 2, 4, 1, 1, 1], [1, 3, 1, 1, 2, 1], [1, 2, 1, 2, 2, 3], [2, 3, 1, 2, 1, 3], [4, 2, 2, 4, 3], [2, 2, 5, 4], [1, 1, 10], [8, 8, 3], [15, 3], [1, 1, 3], [3, 2]],\n                    row_constraint: [[4, 4, 2], [2, 11, 2, 2], [1, 1, 1, 1, 2], [1, 1, 2], [1, 2, 2], [2, 1, 1, 2], [4, 2, 2], [1, 1, 1, 2, 6], [1, 2, 1, 2, 1, 1], [2, 2, 5, 2, 1], [2, 1, 2, 2, 3], [2, 2, 2, 4], [1, 7, 2, 2], [2, 1, 2, 2], [1, 2, 1, 2, 3], [1, 2, 3, 3], [1, 2, 2, 4], [1, 2, 1, 5], [1, 3, 7, 3, 1], [1, 1, 2, 3, 2], [1, 2, 1, 2], [1, 8, 5], [2, 8], [3, 6], [17]],\n                }\n            }\n        }\n\n        this.state[\"row_constraint_len\"] = this.state.images[this.props.image][\"row_constraint_len\"]\n        this.state[\"col_constraint_len\"] = this.state.images[this.props.image][\"col_constraint_len\"]\n        this.state[\"row_constraint\"] = this.state.images[this.props.image][\"row_constraint\"]\n        this.state[\"col_constraint\"] = this.state.images[this.props.image][\"col_constraint\"]\n        // let [row_constraint, col_constraint] = this.constructConstraints()\n        // this.state.row_constraint = row_constraint\n        // this.state.col_constraint = col_constraint\n        this.state.grid = this.constructGrid()\n\n        this.constructConstraints = this.constructConstraints.bind(this)\n        this.populateGrid = this.populateGrid.bind(this)\n        this.constructGrid = this.constructGrid.bind(this)\n        this.renderGrid = this.renderGrid.bind(this)\n        this.getPopupIndices = this.getPopupIndices.bind(this)\n        this.getPopupVal = this.getPopupVal.bind(this)\n        this.resizeConstraints = this.resizeConstraints.bind(this)\n        this.passState = this.passState.bind(this)\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevProps.submit !== this.props.submit && this.props.submit === true) {\n            this.passState()\n        }\n        else if (prevProps.popupIndices !== this.props.popupIndices && this.state.popupIndices !== this.props.popupIndices) {\n            this.setState({\n                popupIndices: [-1, -1]\n            })\n        }\n        else if (prevProps.image !== this.props.image) {\n            this.setState({\n                row_constraint_len: this.state.images[this.props.image][\"row_constraint_len\"],\n                col_constraint_len: this.state.images[this.props.image][\"col_constraint_len\"],\n                row_constraint: this.state.images[this.props.image][\"row_constraint\"],\n                col_constraint: this.state.images[this.props.image][\"col_constraint\"],\n            }, () => this.setState({\n                grid: this.constructGrid()\n            }))\n        }\n        else if (prevProps.rows !== this.props.rows || prevProps.cols !== this.props.cols) {\n            let [row_constraint, col_constraint] = this.constructConstraints()\n            this.setState({\n                row_constraint_len: 1,\n                col_constraint_len: 1,\n                row_constraint: row_constraint,\n                col_constraint: col_constraint\n            }, this.setState({\n                grid: this.constructGrid()\n            }))\n        }\n        else if (prevState.row_constraint_len !== this.state.row_constraint_len || prevState.col_constraint_len !== this.state.col_constraint_len) {\n            let grid = this.constructGrid()\n            this.setState({\n                grid: grid\n            })\n        }\n\n        else if (prevProps.grid !== this.props.grid) {\n            if (this.props.animation === false) {\n                this.populateGrid(this.props.grid)\n            }\n            else {\n                let grids = this.props.grid\n                let display_grids = []\n                for (let j = 0; j < this.props.grid.length; j++) {\n                    let grid = grids[j]\n                    if (grid[0].length === 1) {\n                        grid = [grid]\n                    }\n                    if (grid.length < this.props.rows) {\n                        const l = grid.length\n                        for (let i = 0; i < this.props.rows - l; i++) {\n                            let row = Array(this.props.cols)\n                            row.fill(0)\n                            grid.push(row)\n                        }\n                    }\n\n                    if (j === 0) {\n                        display_grids.push(grid)\n                    }\n                    else if (j !== 0 && grid !== display_grids[j - 1]) {\n                        display_grids.push(grid)\n                    }\n                }\n                let j = 0\n                const id = setInterval(() => {\n                    if (j >= display_grids.length) {\n                        this.populateGrid(display_grids[display_grids.length - 1])\n                        clearInterval(id)\n                    }\n                    else {\n                        const grid = display_grids[j]\n                        this.populateGrid(grid)\n                        j += 1\n                        console.log(j)\n                    }\n                }, 20)\n                // }                      \n\n            }\n        }\n    }\n\n    populateGrid(grid_input) {\n        if (grid_input === \"No Solution\") {\n            this.setState({\n                solution: \"No Solution Found\",\n                grid: this.constructGrid()\n            })\n            return\n        }\n        let grid = this.state.grid\n        for (let i = 0; i < this.props.rows; i++) {\n            for (let j = 0; j < this.props.cols; j++) {\n                const i_offset = i + this.state.row_constraint_len\n                const j_offset = j + this.state.col_constraint_len\n\n                grid[i_offset][j_offset] = grid_input[i][j]\n            }\n        }\n        this.setState({\n            grid: grid,\n            solution: \"Solution Found!\",\n            popup: [-1, -1]\n        })\n    }\n\n    constructConstraints() {\n        let row_constraint = new Array(this.props.rows)\n        for (let i = 0; i < this.props.rows; i++) {\n            row_constraint[i] = []\n        }\n        let col_constraint = new Array(this.props.cols)\n        for (let i = 0; i < this.props.cols; i++) {\n            col_constraint[i] = []\n        }\n        return [row_constraint, col_constraint]\n    }\n\n    constructGrid() {\n        const rows = this.props.rows\n        const cols = this.props.cols\n        const row_constraint_len = this.state.row_constraint_len\n        const col_constraint_len = this.state.col_constraint_len\n\n\n        let grid = new Array(rows + row_constraint_len)\n        //form empty grid of 0s\n        for (let i = 0; i < rows + row_constraint_len; i++) {\n            let row = new Array(cols + col_constraint_len)\n            for (let j = 0; j < cols + col_constraint_len; j++) {\n                row[j] = 0\n            }\n            grid[i] = row\n        }\n\n        for (let i = 0; i < row_constraint_len; i++) {\n            let row = new Array(cols + col_constraint_len)\n            for (let j = 0; j < cols + col_constraint_len; j++) {\n                row[j] = -1\n            }\n            grid[i] = row\n        }\n        for (let i = row_constraint_len; i < row_constraint_len + rows; i++) {\n            let row = new Array(cols + col_constraint_len)\n            for (let j = 0; j < col_constraint_len; j++) {\n                row[j] = -1\n            }\n            for (let j = col_constraint_len; j < cols + col_constraint_len; j++) {\n                row[j] = 0\n            }\n            grid[i] = row\n        }\n\n        return grid\n    }\n\n    renderGrid() {\n        return this.state.grid.map((row, i) => {\n            return <div className=\"gridRow\">{\n                row.map((element, j) => {\n\n                    if (element === -1) {\n                        let showPopup = false\n                        if (i === this.state.popupIndices[0] && j === this.state.popupIndices[1]) {\n                            showPopup = true\n                        }\n\n                        let style = {\n                            \"border-top\": \"inherit\",\n                            \"border-left\": \"inherit\",\n                            \"border-right\": \"none\",\n                            \"background-color\": \"inherit\",\n                            \"border-radius\": \"none\",\n                            \"border-bottom\": \"none\",\n                        }\n                        if (i === 0 && j >= this.state.col_constraint_len) {\n                            style[\"border-top\"] = \"2px solid black\"\n                        }\n\n\n\n                        // if (i < this.state.row_constraint_len && j === this.state.row_constraint_len - 1) {\n                        //     style[\"border-left\"] = \"2px solid black\"\n\n                        // }\n\n                        // if (i === this.state.row_constraint_len && j < this.state.row_constraint_len) {\n                        //     style[\"border-top\"] = \"2px solid black\"\n\n                        // }\n\n\n                        if (i >= this.state.row_constraint_len && j === 0) {\n                            style[\"border-left\"] = \"2px solid black\"\n                        }\n\n                        // if (j === this.state.col_constraint_len - 1) {\n                        //     style[\"border-right\"] = \"2px solid black\"\n                        // }\n\n                        if (i === this.state.row_constraint_len && j < this.state.col_constraint_len) {\n                            style[\"border-top\"] = \"2px solid black\"\n                        }\n\n                        if (i <= this.state.row_constraint_len && j === this.state.col_constraint_len) {\n                            style[\"border-left\"] = \"2px solid black\"\n                        }\n\n                        //row constraint selectors\n                        if (i >= this.state.row_constraint_len) {\n                            const constraint = this.state.row_constraint[i - this.state.row_constraint_len]\n                            let val\n                            if (constraint != null && j - this.state.col_constraint_len + constraint.length >= 0) {\n                                val = constraint[j - this.state.col_constraint_len + constraint.length]\n                            }\n                            else {\n                                val = \"X\"\n                            }\n                            return <Constraint passPopupVal={this.getPopupVal} passPopupIndices={this.getPopupIndices}\n                                rows={this.props.rows} cols={this.props.cols} row={i} col={j} rowConstraint={this.state.row_constraint_len}\n                                colConstraint={this.state.col_constraint_len} showPopup={showPopup}\n                                value={val} style={style} />\n                        }\n                        //column constraint selectors\n                        if (j >= this.state.col_constraint_len) {\n                            const constraint = this.state.col_constraint[j - this.state.col_constraint_len]\n                            let val\n                            if (constraint != null && i - this.state.row_constraint_len + constraint.length >= 0) {\n                                val = constraint[i - this.state.row_constraint_len + constraint.length]\n                            }\n                            else {\n                                val = \"X\"\n                            }\n                            return <Constraint passPopupVal={this.getPopupVal} passPopupIndices={this.getPopupIndices}\n                                rows={this.props.rows} cols={this.props.cols} row={i} col={j} rowConstraint={this.state.row_constraint_len}\n                                colConstraint={this.state.col_constraint_len} showPopup={showPopup} value={val} style={style} />\n                        }\n                        //unselectable gray area\n                        else {\n                            return <div className=\"gridSquare unused\" style={style}> </div>\n                        }\n                    }\n\n                    let style = {\n                        \"border-top\": \"1px dashed gray\",\n                        \"border-left\": \"1px dashed gray\",\n                        \"border-right\": \"\",\n                        \"border-bottom\": \"none\",\n                        \"background-color\": \"white\",\n                        \"color\": \"black\"\n                    }\n\n                    if ((i - this.state.row_constraint_len) % 5 === 0) {\n                        if (i === this.state.row_constraint_len) {\n                            style[\"border-top\"] = \"2px solid black\"\n                        }\n                        else {\n                            style[\"border-top\"] = \"2px solid gray\"\n                        }\n                    }\n                    if ((j - this.state.col_constraint_len) % 5 === 0) {\n                        if (j === this.state.col_constraint_len) {\n                            style[\"border-left\"] = \"2px solid black\"\n                        }\n                        else {\n                            style[\"border-left\"] = \"2px solid gray\"\n                        }\n                    }\n\n                    if (element === 0) {\n                        return <div className=\"gridSquare\" style={style}> </div>\n                    }\n\n                    else if (element === -2) {\n                        return <div className=\"gridSquare\" style={style}>X</div>\n                    }\n\n                    else {\n                        style[\"background-color\"] = \"black\"\n                        style[\"border-top\"] = 0\n                        style[\"border-left\"] = 0\n                        return <div className=\"gridSquare\" style={style}> </div>\n                    }\n                })\n            }</div>\n        })\n    }\n\n    getPopupIndices(val) {\n        this.props.passPopupIndices(val)\n        this.setState({\n            popupIndices: val\n        })\n    }\n\n    getPopupVal(val, axis, index) {\n        if (axis === \"rows\") {\n            let row_constraint = this.state.row_constraint\n            row_constraint[index - this.state.row_constraint_len] = val\n            this.setState({\n                row_constraint: row_constraint\n            })\n            this.resizeConstraints(val.length, axis)\n            return\n        }\n        else if (axis === \"cols\") {\n            let col_constraint = this.state.col_constraint\n            col_constraint[index - this.state.col_constraint_len] = val\n            this.setState({\n                col_constraint: col_constraint\n            })\n            this.resizeConstraints(val.length, axis)\n            return\n        }\n    }\n\n    resizeConstraints(new_len, axis) {\n        if (axis !== \"rows\") {\n            if (new_len > this.state.row_constraint_len) {\n                this.setState({\n                    row_constraint_len: new_len\n                })\n            }\n            return\n        }\n        if (axis !== \"cols\") {\n            if (new_len > this.state.col_constraint_len) {\n                this.setState({\n                    col_constraint_len: new_len\n                })\n            }\n            return\n        }\n    }\n\n    passState() {\n        this.props.passState(this.state)\n    }\n\n    render() {\n        return (\n            <div className=\"gridWrapper\">\n                <div className=\"grid\">\n                    {this.renderGrid()}\n                </div>\n\n                <div>\n                    <h4>{this.state.solution}</h4>\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport axios from 'axios'\nimport RowColForm from './RowColForm'\nimport Grid from './Grid.js'\nimport \"./Page.css\"\n\n\nexport default class Page extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            rows: 15,\n            cols: 15,\n            request_body: null,\n            response: null,\n            submit: false,\n            popupIndices: [-1, -1],\n            exitPopup: false,\n            animation: false,\n            solver: \"DFS\",\n            image: \"Duck\"\n        }\n        this.getFormValue = this.getFormValue.bind(this)\n        this.getGridState = this.getGridState.bind(this)\n        this.getData = this.getData.bind(this)\n        this.updateGrid = this.updateGrid.bind(this)\n        this.submit = this.submit.bind(this)\n        this.getPopupIndices = this.getPopupIndices.bind(this)\n        this.clickHandler = this.clickHandler.bind(this)\n        this.animationToggle = this.animationToggle.bind(this)\n        this.solverToggle = this.solverToggle.bind(this)\n        this.imageToggle = this.imageToggle.bind(this)\n    }\n\n    getFormValue = (name, value) => {\n        let newState = this.state\n        if (Number.isInteger(+value) && value > 0 && value < 26) {\n            newState[name] = value\n            this.setState(newState)\n        }\n    }\n\n\n    getGridState(state) {\n        const gridState = state\n        const request_body = {\n            w: this.state.cols,\n            h: this.state.rows,\n            x: gridState.col_constraint,\n            y: gridState.row_constraint,\n            solver: this.state.solver,\n            animation: this.state.animation\n        }\n        this.setState({\n            request_body: request_body\n        }, () => this.getData())\n    }\n\n    getData() {\n        // const url = \"http://127.0.0.1:5000\"\n        const url = \"https://picross-solver.herokuapp.com\"\n        axios({\n            method: 'post',\n            url: url,\n            data: this.state.request_body\n        }).then((response) => {\n            let data = response.data\n            if (typeof data === \"string\") {\n                data = JSON.parse(data)\n            }\n\n            this.setState({\n                response: response.data,\n                submit: false\n            })\n        })\n            .catch(function (error) {\n                console.log(error);\n            });\n    }\n\n    updateGrid() {\n        return this.state.response\n    }\n\n    submit() {\n        this.setState({\n            submit: true\n        })\n    }\n\n    getPopupIndices(val) {\n        this.setState({\n            popupIndices: val,\n            exitPopup: true\n        })\n    }\n\n    clickHandler(event) {\n        if (this.state.popupIndices[0] !== -1 && this.state.popupIndices[1] !== -1) {\n            if (this.state.exitPopup === false) {\n                this.setState({\n                    exitPopup: true\n                })\n            }\n            else {\n                this.setState({\n                    popupIndices: [-1, -1],\n                    exitPopup: false\n                })\n            }\n        }\n    }\n\n    animationToggle() {\n        this.setState({\n            animation: !this.state.animation\n        })\n    }\n\n    solverToggle() {\n        if (this.state.solver === \"DFS\") {\n            this.setState({\n                solver: \"heuristic\"\n            })\n        }\n        if (this.state.solver === \"heuristic\") {\n            this.setState({\n                solver: \"DFS\"\n            })\n        }\n    }\n\n    imageToggle() {\n        if (this.state.image === \"Duck\") {\n            this.setState({\n                image: \"Crab\",\n                rows: 24,\n                cols: 24\n            })\n        }\n        if (this.state.image === \"Crab\") {\n            this.setState({\n                image: \"Koala\",\n                rows: 25,\n                cols: 25\n            })\n        }\n        if (this.state.image === \"Koala\") {\n            this.setState({\n                image: \"Duck\",\n                rows: 15,\n                cols: 15\n            })\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"page\" onClick={this.clickHandler}>\n                <h1 className=\"display-4 header\">Picross Solver</h1>\n                <p className=\"h4\">Click on the rows and columns to add and remove constraints</p>\n                <div className=\"contentWrapper\">\n                    <div className=\"leftSideWrapper\">\n                        <div className=\"rowColWrapper\">\n                            <RowColForm name=\"Number of Rows (Max 25)\" id=\"rows\" passValue={this.getFormValue} />\n                            <RowColForm name=\"Number of Cols (Max 25)\" id=\"cols\" passValue={this.getFormValue} />\n                        </div>\n                        <div className=\"submissionWrapper\">\n                            <div className=\"input-group-append\">\n                                <button onClick={this.imageToggle} className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\">Image: {this.state.image}</button>\n                            </div>\n                        </div>\n                        <div className=\"submissionWrapper\">\n                            <div className=\"input-group-append\">\n                                <button onClick={this.animationToggle} className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\">Animation: {this.state.animation === true ? \"On\" : \"Off\"}</button>\n                            </div>\n                            <div className=\"input-group-append\">\n                                <button onClick={this.solverToggle} className=\"btn btn-outline-secondary\" type=\"button\" id=\"button-addon2\">Solver: {this.state.solver}</button>\n                            </div>\n                            <input type=\"submit\" value=\"Solve Puzzle!\" className=\"btn btn-warning\" onClick={this.submit} />\n                        </div>\n                    </div>\n                    <Grid rows={this.state.rows} cols={this.state.cols} passState={this.getGridState} grid={this.state.response}\n                        submit={this.state.submit} popupIndices={this.state.popupIndices} passPopupIndices={this.getPopupIndices}\n                        animation={this.state.animation} image={this.state.image} />\n                </div>\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport Page from \"./Page\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n\n      <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css\" integrity=\"sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u\" crossorigin=\"anonymous\" />\n\n      {/* <link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap-theme.min.css\" integrity=\"sha384-rHyoN1iRsVXV4nD0JutlnGaslCJuC7uwjduW9SVrLvRYooPp2bWYgmgJQIXwl/Sp\" crossorigin=\"anonymous\" /> */}\n\n      <script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js\" integrity=\"sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa\" crossorigin=\"anonymous\"></script>\n      <Page />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}